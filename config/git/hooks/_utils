#!/usr/bin/env bash

# based on https://qiita.com/ik-fib/items/55edad2e5f5f06b3ddd1
GIT_ROOT="$(git rev-parse --show-superproject-working-tree --show-toplevel | head -1)"
HOOK_NAME="$(basename "$0")"
LOCAL_HOOK="$GIT_ROOT/.git/hooks/$HOOK_NAME"

if [ -e "$LOCAL_HOOK" ]; then
  # shellcheck source=/dev/null
  source "$LOCAL_HOOK"
fi

git_hook_tempfile="$(mktemp)"
exec 1> >(tee -a "$git_hook_tempfile" >&2)
exec 2> >(tee -a "$git_hook_tempfile" >&2)
trap 'rm -f $git_hook_tempfile' EXIT

if git rev-parse --verify HEAD > /dev/null; then
  against='HEAD'
else
  # Initial commit: diff against an empty tree object
  against="$(git hash-object -t tree /dev/null)"
fi

check() {
  printf '\e[1m●\e[m \e[1m%s\e[m\n' "$1"
  if [[ -n $2 ]]; then
    git diff-index --cached --name-only "$against" \
      | grep -Eq "$2"
  fi
}

error() {
  local len
  len="$(wc -l < "$git_hook_tempfile")"
  printf '\e[%dF\e[1;31m✗\e[%dE\e[31m\e[1E' "$len" "$len"
  printf 'Error\e[m: %s\n' "$*"
  exit 1
}

endcheck() {
  local len
  len="$(wc -l < "$git_hook_tempfile")"
  printf '\e[%dF\e[1;32m✔︎\e[m\e[%dE' "$len" "$len"
  printf '' > "$git_hook_tempfile"
}
