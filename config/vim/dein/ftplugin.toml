hook_add = '''
let g:python_highlight_all = v:true
let g:awk_is_gawk = v:true
let g:is_bash = v:true
let g:rust_bang_comment_leader = v:true
let g:markdown_fenced_languages = ['ts=typescript']
let g:vim_indent_cont = 6

autocmd user ColorScheme *
      \ hi link markdownCode Constant
'''

[ftplugin]
_ = '''
setlocal formatoptions-=ro
setlocal formatoptions+=mMBl
'''

typescript = '''
nnoremap <buffer> <Leader><C-r> <Cmd>call denops#server#restart()<CR>
'''

python = '''
setlocal softtabstop=4
setlocal shiftwidth=4
setlocal textwidth=80
setlocal smarttab
setlocal expandtab
setlocal nosmartindent
inoreabbrev <buffer> improt import
'''

help = '''
setlocal iskeyword+=#
setlocal iskeyword+=:
setlocal iskeyword+=-
setlocal iskeyword+=+
nnoremap <buffer> q <C-w>q
'''

dockerfile = '''
function! s:set_abbrev(instruction) abort
  execute 'inoreabbrev <expr><buffer>' a:instruction
        \ printf("(getline('.')[:col('.') - 2] ==# '%s')", a:instruction)
        \ printf("? '%s' : '%s'", toupper(a:instruction), a:instruction)
endfunction

call s:set_abbrev('add')
call s:set_abbrev('cmd')
call s:set_abbrev('copy')
call s:set_abbrev('entrypoint')
call s:set_abbrev('env')
call s:set_abbrev('expose')
call s:set_abbrev('from')
call s:set_abbrev('healthcheck')
call s:set_abbrev('label')
call s:set_abbrev('onbuild')
call s:set_abbrev('run')
call s:set_abbrev('shell')
call s:set_abbrev('user')
call s:set_abbrev('volume')
call s:set_abbrev('workdir')

inoreabbrev <expr><buffer> as
      \ (getline('.')[0 : col('.') - 2] =~# '^FROM\s\+.*\s\+') ? 'AS' : 'as'
'''

qf = '''
nnoremap <buffer> q <C-w>q
'''

gitcommit = '''
let b:caw_oneline_comment = ';'
" from https://zenn.dev/uochan/articles/2021-12-08-vim-conventional-commits
" TODO: use trim()
function! s:select_type() abort
  let line = substitute(getline('.'), '^;\s*', '', '')
  let title = printf('%s: ', substitute(split(line, ';')[0], '\s\+$', '', ''))

  silent! normal! "_dip
  silent! put! =title
  silent! startinsert!
endfunction

nnoremap <buffer> <CR><CR> <Cmd>call <SID>select_type()<CR>
'''

markdown = '''
setlocal iskeyword-=`
'''

toml = '''
if !empty(filter(getline(1, 4),
      \ {_, val -> val =~# '^\[\[plugins]]$\|^hook_' }))
  call dein#toml#syntax()
endif
'''

[[plugins]]
repo = 'cespare/vim-toml'
if = '!has("patch-8.2.3520")'
on_ft = ['toml']

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_add = '''
let g:vim_markdown_follow_anchor = v:true
let g:vim_markdown_no_extensions_in_markdown = v:true
let g:vim_markdown_math = v:true
let g:vim_markdown_frontmatter = v:true
let g:vim_markdown_strikethrough = v:true
'''

[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = ['markdown']
on_cmd = ['MakeTable', 'UnmakeTable']

[[plugins]]
repo = 'gko/vim-coloresque'
on_ft = ['vim', 'css', 'scss', 'sass']

[[plugins]]
repo = 'lark-parser/vim-lark-syntax'
on_ft = ['lark']

[[plugins]]
repo = 'vim-jp/syntax-vim-ex'
on_ft = ['vim']

[[plugins]]
repo = 'tmux-plugins/vim-tmux'
on_ft = ['tmux']

[[plugins]]
repo = 'tpope/vim-git'
on_ft = ['gitcommit', 'gitconfig', 'gitrebase', 'gitsendmail']

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['qf']
on_cmd = ['Qfreplace']
[plugins.ftplugin]
qf = '''
nnoremap <buffer> r <Cmd>Qfreplace<CR>
'''
qfreplace = '''
nnoremap <buffer> q <C-w>q
'''

