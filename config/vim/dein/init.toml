
# for testing vim-readme-viewer

[[plugins]]
repo = 'k-takata/minpac'

[[plugins]]
repo = 'junegunn/vim-plug'

[[plugins]]
repo = 'wbthomason/packer.nvim'

##############################

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'thinca/vim-localrc'
hook_add = '''
let g:localrc_filename = '.vimrc.local'
'''

[[plugins]]
repo = 'obcat/vim-sclow'
if = '!has("nvim")'
hook_add = '''
let g:sclow_hide_full_length = v:true
'''

[[plugins]]
repo = 'obcat/vim-hitspop'
if = '!has("nvim")'
hook_add = '''
let g:hitspop_line = 'winbot'
let g:hitspop_timeout = 2000
autocmd user ColorScheme *
      \ hi link hitspopErrormsg ErrorMsg
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
let s:context_filetypes = context_filetype#default_filetypes()
call remove(s:context_filetypes, 'markdown')
call extend(s:context_filetypes, {'markdown': values(map(
      \ {'\(\h\w*\)': '\1', 'viml': 'vim'},
      \ { key, val -> {
      \   'start': '^\s*```\s*' .. key,
      \   'end': '^\s*```$',
      \   'filetype': val,
      \ } }))})
let g:context_filetype#filetypes = s:context_filetypes
let g:context_filetype#ignore_patterns = {
      \ 'toml': ['^\s*#\s*'],
      \ }
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
hook_add = '''
let g:extra_whitespace_ignored_filetypes = ['diff', 'help', 'capture']
'''

[[plugins]]
repo = 'mattn/vim-molder'
[plugins.ftplugin]
molder = '''
nnoremap <buffer> q <C-w>q
nmap <buffer> <C-r> <Plug>(molder-reload)
'''

[[plugins]]
repo = 'mattn/vim-molder-operations'
depends = ['vim-molder']

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
Runtime dein/settings/submode.vim
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_source = ['vim-lsp-settings']
on_ft = [
  'python', 'typescript', 'typescriptreact',
  'rust', 'markdown', 'yaml', 'json',
]
hook_add = '''
autocmd user BufNewFile,BufRead
      \ *.py,*.ts,*.tsx,*.rs,*.md
      \ call lsp#enable()
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = ['vim-lsp']
hook_add = '''
Runtime dein/settings/vim-lsp.vim
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
Runtime dein/settings/lightline.vim
'''

[[plugins]]
repo = 'halkn/lightline-lsp'
on_source = ['lightline.vim', 'vim-lsp']

[[plugins]]
repo = 'shinchu/lightline-gruvbox.vim'

[[plugins]]
repo = 'cocopon/lightline-hybrid.vim'

[[plugins]]
repo = 'itchyny/vim-highlighturl'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
" TODO: send PR to the repository to use instead 'hi def Group' instead of 'hi Group'
" autocmd user ColorScheme * hi link ParenMatch MatchParen
'''

[[plugins]]
repo = 'machakann/vim-highlightedyank'
hook_add = '''
let g:highlightedyank_highlight_duration = 100
'''

# TODO: use :SclowDisable before to decrease flickering
[[plugins]]
repo = 'yuttie/comfortable-motion.vim'
hook_add = '''
let g:comfortable_motion_no_default_key_mappings = 1
nnoremap <silent> <C-d> <Cmd>call comfortable_motion#flick(winheight(0) * 2)<CR>
nnoremap <silent> <C-u> <Cmd>call comfortable_motion#flick(winheight(0) * -2)<CR>
nnoremap <silent> <C-f> <Cmd>call comfortable_motion#flick(winheight(0) * 4)<CR>
nnoremap <silent> <C-b> <Cmd>call comfortable_motion#flick(winheight(0) * -4)<CR>
'''

# TODO: send PR to use `hi def` instead of `hlexists()`
[[plugins]]
repo = 'hrsh7th/vim-seak'
hook_add = '''
let g:seak_enabled = v:true
let g:seak_marks = split('ASDFHJKL', '.\zs')
let g:seak_auto_accept = v:true
autocmd user ColorScheme *
      \ hi def SeakChar gui=bold,underline guifg=Red guibg=NONE
'''

[[plugins]]
repo = 'tmux-plugins/vim-tmux-focus-events'
if = '!has("gui_running") && !has("patch-8.2.2345") && !has("nvim")'

# NOTE: clipboard connections
# -> : can modify clipboard
# vim <-.      .-> iPadOS(iSH)
#  \     \    /
#   `---> tmux
[[plugins]]
repo = 'roxma/vim-tmux-clipboard'
if = '!has("gui_running")'

