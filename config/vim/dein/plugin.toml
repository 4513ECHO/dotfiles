[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['InsertEnter', 'CmdlineEnter']
rev = 'dev'
hook_source = '''
let g:lexima_no_default_rules = v:true
Runtime dein/settings/lexima.vim
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
type__depth = 1

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = ['QuickRun']
hook_add = '''
let g:quickrun_config = {
      \ '_': {
      \   'runner': 'job',
      \   'outputter/buffer/opener': 'botright 10split',
      \   'outputter/buffer/close_on_empty': v:true,
      \   'hook/time/enable': v:true,
      \ },
      \ 'typescript': {
      \   'type': 'typescript/deno',
      \ },
      \ }
'''
[plugins.ftplugin]
quickrun = '''
nnoremap <buffer> q <C-w>q
'''

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = ['Capture', 'CaptureJson']
hook_source = '''
command! -bang -bar -nargs=1 -complete=var CaptureJson
      \ : execute 'Capture<bang> echo json_encode(<args>)'
      \ | if &filetype ==# 'capture'
      \ |   execute '%!jq'
      \ |   setfiletype json
      \ | endif
'''
[plugins.ftplugin]
capture = '''
nnoremap <buffer> q <C-w>q
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = { nx = '<Plug>' }
depends = ['vim-operator-user']
hook_add = '''
let g:caw_operator_keymappings = v:true
let g:caw_no_default_keymappings = v:true
nmap <silent> m  <Plug>(caw:hatpos:toggle:operator)
nmap <silent> mm <Plug>(caw:hatpos:toggle)
xmap <silent> m  <Plug>(caw:hatpos:toggle:operator)
'''


[[plugins]]
repo = 'thinca/vim-scall'
on_func = ['S']
hook_add = '''
let g:scall_function_name = 'S'
'''

[[plugins]]
repo = 'cocopon/colorswatch.vim'
on_cmd = ['ColorSwatchGenerate']

[[plugins]]
repo = 'cocopon/inspecthi.vim'
depends = ['colorswatch.vim']
on_cmd = ['Inspecthi']

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'
on_cmd = ['AnsiEsc']

[[plugins]]
repo = 'haya14busa/vim-edgemotion'
on_map = { nx = '<Plug>' }
hook_add = '''
nmap <C-j> <Plug>(edgemotion-j)
nmap <C-k> <Plug>(edgemotion-k)
xmap <C-j> <Plug>(edgemotion-j)
xmap <C-k> <Plug>(edgemotion-k)
'''

[[plugins]]
repo = 'junegunn/fzf'
merged = 0
on_cmd = ['FZF']
if = 'executable("fzf")'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
on_cmd = [
  'FzfFiles', 'FzfGFiles', 'FzfBuffers', 'FzfColors', 'FzfAg', 'FzfRg',
  'FzfLines', 'FzfBLines', 'FzfTags', 'FzfBTags', 'FzfMarks', 'FzfWindows',
  'FzfLocate', 'FzfHistory', 'FzfSnippets', 'FzfCommits', 'FzfBCommits',
  'FzfCommands', 'FzfMaps', 'FzfHelptags', 'FzfFiletypes',
]
if = 'executable("fzf")'
hook_add = '''
let g:fzf_command_prefix = 'Fzf'
'''

[[plugins]]
repo = 'guns/xterm-color-table.vim'
on_cmd = ['XtermColorTable']

[[plugins]]
repo = '4513echo/vim-readme-viewer'
on_cmd = ['DeinReadme']
hook_add = '''
let g:readme_viewer#plugin_manager = 'dein.vim'
'''

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'
on_cmd = ['DeinUpdate']
[plugins.ftplugin]
SpaceVimPlugManager = '''
let s:dein_update_timer = timer_start(10, { -> execute('normal! G') }, {'repeat': -1})
autocmd user BufLeave * ++once call timer_stop(s:dein_update_timer)
'''

[[plugins]]
repo = 'tweekmonster/startuptime.vim'
on_cmd = ['StartupTime']

# [[plugins]]
# repo = 'pocke/keycast.vim'
# if = '!has("nvim")'
# on_cmd = ['KeycastStart', 'KeycastStop']
# depends = ['vanner']

# [[plugins]]
# repo = 'pocke/vanner'

[[plugins]]
repo = 'thinca/vim-scouter'
on_cmd = ['Scouter']
on_func = ['Scouter']
hook_add = '''
command! Scouter echo Scouter(g:config_home)
'''

[[plugins]]
repo = 'rbtnn/vim-coloredit'
if = '!has("nvim")'
on_cmd = ['ColorEdit']

# [[plugins]]
# repo = 'reireias/vim-cheatsheet'
# on_cmd = ['Cheat']
# hook_add = '''
# let g:cheatsheet#cheat_file = g:config_home .. '/doc/cheatsheet.md'
# '''

# [[plugins]]
# repo = 'kat0h/bufpreview.vim'
# depends = ['denops.vim']
# hook_add = '''
# let g:bufpreview_server_host = '0.0.0.0'
# let g:bufpreview_server_port = 8888
# '''

# [[plugins]]
# repo = 'skanehira/badapple.vim'
# if = '!has("nvim")'
# on_cmd = ['BadApple']

[[plugins]]
repo = 'mattn/benchvimrc-vim'
on_cmd = ['BenchVimrc']

[[plugins]]
repo = 'dhruvasagar/vim-zoom'
on_map = { n = '<Plug>' }
hook_add = '''
let g:zoom#statustext = 'zoomed'
nmap <C-w>z <Plug>(zoom-toggle)
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = { nx = '<Plug>(openbrowser' }
on_cmd = ['OpenBrowser', 'OpenBrowserSearch', 'OpenBrowserSmartSearch']
hook_add = '''
nmap gx <Plug>(openbrowser-smart-search)
xmap gx <Plug>(openbrowser-smart-search)
let g:openbrowser_browser_commands = [{
      \ 'name': 'w3m',
      \ 'args': 'tmux-w3m {uri} open-browser',
      \ }]
'''

[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = ['HelpfulVersion']

[[plugins]]
repo = 'thinca/vim-prettyprint'
on_cmd = ['PP', 'PrettyPrint']

[[plugins]]
repo = 'haya14busa/is.vim'
depends = ['vim-asterisk']
on_map = { nx = '<Plug>' }
hook_add = '''
let g:is#do_default_mappings = v:false
nmap n  <Plug>(is-n)zz
nmap N  <Plug>(is-N)zz
nmap *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)zz
xmap *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)zz
nmap #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)zz
xmap #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)zz
nmap g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)zz
xmap g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)zz
nmap g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)zz
xmap g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)zz
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = { nx = '<Plug>' }
hook_add = '''
let g:asterisk#keeppos = v:true
'''

