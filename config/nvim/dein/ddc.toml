[[plugins]]
repo = 'https://github.com/Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
on_event = ['InsertEnter']
hooks_file = '$DEIN_DIR/settings/ddc.vim'

# UI

[[plugins]]
repo = 'https://github.com/Shougo/ddc-ui-pum'

# sources

[[plugins]]
repo = 'https://github.com/4513ECHO/ddc-github'

[[plugins]]
repo = 'https://github.com/LumaKernel/ddc-source-file'

[[plugins]]
repo = 'https://github.com/Shougo/ddc-source-around'

[[plugins]]
repo = 'https://github.com/Shougo/ddc-source-cmdline'

[[plugins]]
repo = 'https://github.com/Shougo/ddc-source-line'

[[plugins]]
repo = 'https://github.com/Shougo/ddc-source-mocword'

[[plugins]]
repo = 'https://github.com/Shougo/ddc-source-lsp'

[[plugins]]
repo = 'https://github.com/Shougo/ddc-source-omni'

[[plugins]]
repo = 'https://github.com/Shougo/ddc-source-shell-native'

[[plugins]]
repo = 'https://github.com/Shougo/neco-vim'
on_ft = ['toml', 'vim']

[[plugins]]
repo = 'https://github.com/delphinus/ddc-tmux'

[[plugins]]
repo = 'https://github.com/hrsh7th/vim-vsnip'
on_event = ['InsertEnter']
hook_add = '''
let g:vsnip_snippet_dir = g:config_home .. '/snippets'
inoremap <expr> <C-l> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : ''
snoremap <expr> <C-l> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : ''
'''

[[plugins]]
repo = 'https://github.com/uga-rosa/ddc-source-buffer'

[[plugins]]
repo = 'https://github.com/uga-rosa/ddc-source-vsnip'

[[plugins]]
repo = 'https://github.com/vim-skk/skkeleton'
on_map = { ict = '<Plug>' }
hooks_file = '$DEIN_DIR/settings/skkeleton.vim'

# filters

[[plugins]]
repo = 'https://github.com/Shougo/ddc-filter-converter_remove_overlap'

[[plugins]]
repo = 'https://github.com/matsui54/ddc-converter_truncate'

[[plugins]]
repo = 'https://github.com/tani/ddc-fuzzy'
hook_add = '''
autocmd vimrc ColorScheme * hi def link FuzzyAccent Number
'''

# popup windows

[[plugins]]
repo = 'https://github.com/Shougo/pum.vim'
hook_source = '''
call pum#set_option(#{
      \ highlight_columns: #{
      \   kind: 'Type',
      \ },
      \ max_columns: #{},
      \ max_width: 100,
      \ padding: v:true,
      \ scrollbar_char: 'â–ˆ',
      \ use_complete: v:true,
      \ })
if has('nvim')
  function! s:pum_set_hl() abort
    let hl = nvim_get_hl(0, #{ name: 'PmenuSel' })
    if hl->get('reverse', v:false)
      unlet hl.reverse
      let [fg, bg] = [hl->get('fg', v:null), hl->get('bg', v:null)]
      eval hl ->extend(fg isnot# v:null ? #{ bg: fg->printf('#%06x') } : {})
            \ ->extend(bg isnot# v:null ? #{ fg: bg->printf('#%06x') } : {})
            \ ->{ hl -> nvim_set_hl(0, 'PmenuSel', hl) }()
    endif
  endfunction
else
  function! s:pum_set_hl() abort
    let [hl] = hlget('PmenuSel', v:true)
    if hl->get('gui', {})->get('reverse', v:false)
      unlet hl.gui.reverse hl.cterm.reverse
      let [fg, bg] = [hl->get('guifg', v:null), hl->get('guibg', v:null)]
      eval hl ->extend(fg isnot# v:null ? #{ guibg: fg } : {})
            \ ->extend(bg isnot# v:null ? #{ guifg: bg } : {})
            \ ->extend(#{ force: v:true })
            \ ->{ hl -> hlset([hl]) }()
    endif
  endfunction
endif
call s:pum_set_hl()
autocmd vimrc ColorScheme * call s:pum_set_hl()
'''

[[plugins]]
repo = 'https://github.com/matsui54/denops-popup-preview.vim'
depends = ['denops.vim']
hook_add = '''
let g:popup_preview_config = #{
      \ maxWidth: 100,
      \ }
autocmd vimrc TextChangedI * ++once ++nested call popup_preview#enable()
'''

[[plugins]]
repo = 'https://github.com/matsui54/denops-signature_help'
depends = ['denops.vim']
hook_add = '''
let g:signature_help_config = #{
      \ maxWidth: 100,
      \ }
autocmd vimrc TextChangedI * ++once ++nested call signature_help#enable()
'''
