[[plugins]]
repo = 'cocopon/snapbuffer.vim'
on_cmd = ['SnapBuffer']

[[plugins]]
repo = 'guns/xterm-color-table.vim'
on_cmd = ['XtermColorTable']

[[plugins]]
repo = 'junegunn/fzf'
on_func = ['fzf#']
merged = false
on_cmd = ['FZF']

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
on_cmd = [
  'FzfFiles', 'FzfGFiles', 'FzfBuffers', 'FzfColors', 'FzfAg', 'FzfRg',
  'FzfLines', 'FzfBLines', 'FzfTags', 'FzfBTags', 'FzfMarks', 'FzfWindows',
  'FzfLocate', 'FzfHistory', 'FzfSnippets', 'FzfCommits', 'FzfBCommits',
  'FzfCommands', 'FzfMaps', 'FzfHelptags', 'FzfFiletypes',
  'FzfGhq', 'FzfDein', 'FzFActions', 'FzfMru',
]
on_func = ['fzf#']
hook_add = '''
let g:fzf_command_prefix = 'Fzf'
let g:launcher_config.fzf = {
      \ 'char': 'f',
      \ 'run': 'FzFActions',
      \ }
'''
hook_source = '''
command! -bar FzfColors call fzf#run(fzf#wrap({
      \ 'source': keys(user#colorscheme#get()),
      \ 'sink': { arg -> user#colorscheme#command(arg) },
      \ }))
command! -bar FzfReadme call fzf#run(fzf#wrap({
      \ 'source': keys(readme_viewer#get()),
      \ 'sink': { arg -> readme_viewer#open(arg, '') },
      \ }))
command! -bar FzfGhq call fzf#run(fzf#wrap({
      \ 'source': 'ghq list --full-path',
      \ 'sink': 'edit',
      \ }))
command! -bar FzfDein call fzf#run(fzf#wrap({
      \ 'source': keys(dein#get()),
      \ 'sink': { arg -> execute('edit ' .. dein#get(arg).path) },
      \ }))
command! -bar FzFActions call fzf#run(fzf#wrap({
      \ 'source': map(split(execute('command Fzf'), "\n")[1:],
      \   { _, val -> matchstr(val, '\<Fzf\a\+\>') }),
      \ 'sink': { arg -> execute(arg) },
      \ }))
command! -bar FzfMru call fzf#run(fzf#wrap({
      \ 'source': mr#mru#list(),
      \ 'sink': 'edit',
      \ }))
'''

[[plugins]]
repo = 'lambdalisue/fern.vim'
on_cmd = ['Fern']
hook_add = '''
let g:fern#keepalt_on_edit = v:true
let g:fern#keepjumps_on_edit = v:true
'''
[plugins.ftplugin]
fern = '''
nnoremap <buffer> F <Plug>(fern-action-focus:parent)
nnoremap <buffer> q <C-w>q
nnoremap <buffer><expr> r printf('<Cmd>Fern %s<CR>',
      \ systemlist('git rev-parse --show-superproject-working-tree --show-toplevel')[0])
nnoremap <buffer><expr> W $'<Cmd>Fern {getcwd()}<CR>'
nnoremap <buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
nnoremap <buffer><expr> k line('.') == 1         ? 'G'  : 'k'
'''

[[plugins]]
repo = 'lambdalisue/vim-manpager'
on_cmd = ['MANPAGER', 'Man']

[[plugins]]
repo = 'mattn/benchvimrc-vim'
on_cmd = ['BenchVimrc']

[[plugins]]
repo = 'mattn/vim-sl'
on_func = ['sl#animate']

[[plugins]]
repo = 'pocke/keycast.vim'
depends = ['vanner']
if = '!has("nvim")'
on_cmd = ['KeycastStart', 'KeycastStop']

[[plugins]]
repo = 'pocke/vanner'

[[plugins]]
repo = 'prabirshrestha/async.vim'
on_cmd = ['AsyncEmbed']

[[plugins]]
repo = 'skanehira/badapple.vim'
if = '!has("nvim")'
on_cmd = ['BadApple']

[[plugins]]
repo = 'thinca/vim-prettyprint'
on_cmd = ['PP', 'PrettyPrint']

[[plugins]]
repo = 'thinca/vim-scall'
on_func = ['S']
hook_add = '''
let g:scall_function_name = 'S'
'''

[[plugins]]
repo = 'thinca/vim-scouter'
on_cmd = ['Scouter']
on_func = ['Scouter']
hook_add = '''
command! Scouter echo Scouter(g:config_home)
'''

[[plugins]]
repo = 'tweekmonster/startuptime.vim'
on_cmd = ['StartupTime']

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'
on_cmd = ['DeinUpdate']
[plugins.ftplugin]
SpaceVimPlugManager = '''
autocmd vimrc TextChanged <buffer> normal! G
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
on_event = ['BufRead']
hook_add = '''
let g:indentLine_bufTypeExclude = ['help', 'terminal']
let g:indentLine_char = 'Â¦'
let g:indentLine_faster = v:true
let g:indentLine_setConceal = v:false
'''
