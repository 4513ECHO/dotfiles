[[plugins]]
repo = 'machakann/vim-sandwich'
depends = [
  'vim-textobj-entire', 'vim-textobj-line',
  'vim-textobj-wiw', 'vim-textobj-anyblock', 'vim-textobj-between',
  'vim-textobj-functioncall',
]
on_map = { xno = '<Plug>', n = '<Plug>(operator-sandwich' }
hook_add = '''
let g:sandwich_no_default_key_mappings = v:true
let g:operator_sandwich_no_default_key_mappings = v:true
let g:textobj_sandwich_no_default_key_mappings = v:true

" vim-surround like mappings
nnoremap ys <Plug>(sandwich-add)
onoremap <SID>line :normal! ^vg_<CR>
nnoremap <silent> yss <Plug>(sandwich-add)<SID>line
onoremap <SID>gul g_
nnoremap <silent> yS <Plug>(sandwich-add)<SID>gul
nnoremap ds <Plug>(sandwich-delete)
nnoremap dss <Plug>(sandwich-delete-auto)
nnoremap cs <Plug>(sandwich-replace)
nnoremap css <Plug>(sandwich-replace-auto)
xnoremap S <Plug>(sandwich-add)
nnoremap . <Plug>(operator-sandwich-dot)

let g:sandwich#magicchar#f#patterns = [{
      \ 'header' : '\<\%(\h\k*\.\)*\h\k*',
      \ 'bra'    : '(',
      \ 'ket'    : ')',
      \ 'footer' : '',
      \ }]
'''
hook_source = '''
call operator#sandwich#set('add', 'char', 'skip_space', 1)
let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)
" form https://github.com/yuki-yano/dotfiles/blob/8840dc3a90/.vimrc#L2899
let g:sandwich#recipes += [
      \ {
      \   'buns': ['${', '}'],
      \   'input': ['$'],
      \   'filetype': [
      \     'javascript', 'javascriptreact', 'typescript', 'typescriptreact',
      \   ],
      \ },
      \ {
      \   'buns': ['$(', ')'],
      \   'input': ['$'],
      \   'filetype': [
      \     'sh', 'zsh',
      \   ],
      \ },
      \ {
      \   'buns': ['#{', '}'],
      \   'input': ['#'],
      \   'filetype': ['vim', 'ruby', 'eruby'],
      \ },
      \ {
      \   'buns': ['SandwichGenericsName()', '">"'],
      \   'expr': v:true,
      \   'cursor': 'inner_tail',
      \   'kind': ['add', 'replace'],
      \   'action': ['add'],
      \   'input': ['g'],
      \ },
      \ {
      \   'external': ['i<', "\<Plug>(textobj-functioncall-generics-a)"],
      \   'noremap': v:false,
      \   'kind': ['delete', 'replace', 'query'],
      \   'input': ['g'],
      \ },
      \ ]

function! SandwichGenericsName() abort
  let genericsname = input('Generics Name: ', '')
  if empty(genericsname)
    throw 'OperatorSandwichCancel'
  endif
  return genericsname .. '<'
endfunction
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-textobj-user'

# [[plugins]]
# repo = 'kana/vim-textobj-indent'
# on_map = { xo = '<Plug>' }
# depends = ['vim-textobj-user']

[[plugins]]
repo = 'kana/vim-textobj-entire'
on_map = { xo = '<Plug>' }
depends = ['vim-textobj-user']
hook_add = '''
onoremap ae <Plug>(textobj-entire-a)
onoremap ie <Plug>(textobj-entire-i)
xnoremap ae <Plug>(textobj-entire-a)
xnoremap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-line'
on_map = { xo = '<Plug>' }
depends = ['vim-textobj-user']
hook_add = '''
onoremap al <Plug>(textobj-line-a)
onoremap il <Plug>(textobj-line-i)
xnoremap al <Plug>(textobj-line-a)
xnoremap il <Plug>(textobj-line-i)
'''

[[plugins]]
repo = 'machakann/vim-textobj-functioncall'
on_map = { xo = '<Plug>' }
on_func = ['textobj#functioncall#i', 'textobj#functioncall#ip']
depends = ['vim-textobj-user']
hook_add = '''
" from https://github.com/yuki-yano/dotfiles/blob/8840dc3a90/.vimrc#L2953
let g:textobj_functioncall_no_default_key_mappings = v:true

let g:textobj_functioncall_patterns = [{
      \ 'header' : '\<\%(\h\k*\.\)*\h\k*',
      \ 'bra'    : '(',
      \ 'ket'    : ')',
      \ 'footer' : '',
      \ }]
onoremap <silent> af <Plug>(textobj-functioncall-i)
onoremap <silent> if <Plug>(textobj-functioncall-innerparen-i)
xnoremap <silent> af <Plug>(textobj-functioncall-i)
xnoremap <silent> if <Plug>(textobj-functioncall-innerparen-i)

let g:textobj_functioncall_generics_patterns = [{
      \ 'header' : '\<\h\k*',
      \ 'bra'    : '<',
      \ 'ket'    : '>',
      \ 'footer' : '',
      \ }]
onoremap <silent> <Plug>(textobj-functioncall-generics-a) :<C-u>call textobj#functioncall#i('o', g:textobj_functioncall_generics_patterns)<CR>
onoremap <silent> <Plug>(textobj-functioncall-generics-i) :<C-u>call textobj#functioncall#ip('o', g:textobj_functioncall_generics_patterns)<CR>
xnoremap <silent> <Plug>(textobj-functioncall-generics-a) :<C-u>call textobj#functioncall#i('x', g:textobj_functioncall_generics_patterns)<CR>
xnoremap <silent> <Plug>(textobj-functioncall-generics-i) :<C-u>call textobj#functioncall#ip('x', g:textobj_functioncall_generics_patterns)<CR>
onoremap <silent> ag <Plug>(textobj-functioncall-generics-a)
onoremap <silent> ig <Plug>(textobj-functioncall-generics-i)
xnoremap <silent> ag <Plug>(textobj-functioncall-generics-a)
xnoremap <silent> ig <Plug>(textobj-functioncall-generics-i)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-context'
on_map = { xo = '<Plug>' }
depends = ['vim-textobj-user']
hook_add = '''
onoremap ix <Plug>(textobj-context-i)
xnoremap ix <Plug>(textobj-context-i)
'''

[[plugins]]
repo = 'rhysd/vim-textobj-anyblock'
on_map = { xo = '<Plug>' }
depends = ['vim-textobj-user']
hook_add = '''
onoremap ab <Plug>(textobj-anyblock-a)
onoremap ib <Plug>(textobj-anyblock-i)
xnoremap ab <Plug>(textobj-anyblock-a)
xnoremap ib <Plug>(textobj-anyblock-i)
'''

[[plugins]]
repo = 'rhysd/vim-textobj-wiw'
on_map = { xo = '<Plug>' }
depends = ['vim-textobj-user']
hook_add = '''
let g:textobj_wiw_no_default_key_mappings = v:true
onoremap au <Plug>(textobj-wiw-a)
onoremap iu <Plug>(textobj-wiw-i)
xnoremap au <Plug>(textobj-wiw-a)
xnoremap iu <Plug>(textobj-wiw-i)
'''

[[plugins]]
repo = 'thinca/vim-textobj-between'
on_map = { xo = '<Plug>' }
depends = ['vim-textobj-user']
hook_add = '''
let g:textobj_between_no_default_key_mappings = v:true
onoremap ao <Plug>(textobj-between-a)
onoremap io <Plug>(textobj-between-i)
xnoremap ao <Plug>(textobj-between-a)
xnoremap io <Plug>(textobj-between-i)
'''
