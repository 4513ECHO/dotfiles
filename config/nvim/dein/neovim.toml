[[plugins]]
repo = 'b0o/SchemaStore.nvim'

[[plugins]]
repo = 'chomosuke/term-edit.nvim'
lazy = true
on_event = ['TermOpen']
lua_source = '''
require("term-edit").setup {
  prompt_end = "❯ ",
  mapping = { n = { S = false } },
}
'''

[[plugins]]
repo = 'folke/neodev.nvim'
on_event = ['LspAttach']
lua_source = '''
require("neodev").setup {}
'''

[[plugins]]
repo = 'hrsh7th/nvim-pasta'
lazy = true
on_lua = ['pasta']
lua_add = '''
vim.keymap.set({ "n", "x" }, "p", function() require("pasta.mappings").p() end)
vim.keymap.set({ "n", "x" }, "P", function() require("pasta.mappings").P() end)
'''
lua_source = '''
require("pasta").setup {}
require("pasta").setup.filetype({ "markdown", "python", "yaml" }, {
  fix_indent = false,
})
'''

[[plugins]]
repo = 'https://git.sr.ht/~whynothugo/lsp_lines.nvim'
on_event = ['LspAttach']
lua_source = '''
require("lsp_lines").setup()
vim.diagnostic.config { virtual_lines = false }
vim.keymap.set("n", "[Toggle]d", function()
  local config = vim.diagnostic.config()
  vim.diagnostic.config {
    virtual_text = not config.virtual_text,
    virtual_lines = not config.virtual_lines,
  }
  vim.api.nvim_echo(
    {
      { "Diagnostic Mode: " },
      { config.virtual_lines and "virtual_text" or "virtual_lines", "Constant" },
    },
    false,
    {}
  )
end)
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_event = ['LspAttach']
rev = 'legacy'
lua_source = '''
require("fidget").setup {
  text = {
    spinner = "dots_pulse",
  },
}
'''

[[plugins]]
repo = 'kevinhwang91/nvim-hlslens'
lazy = true
on_lua = ['hlslens']
on_event = ['CmdlineEnter']
hook_add = '''
autocmd vimrc User SearchxEnter,SearchxInputChanged,VimrcSearchPost lua require("hlslens").start()
autocmd vimrc User SearchxCancel lua require("hlslens").stop()
'''
lua_source = '''
require("hlslens").setup {
  enable_incsearch = false,
}
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = ['BufRead']
lua_source = '''
require "vimrc.plugins.lsp"
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
lazy = true
on_lua = ['plenary']

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
lazy = true
on_event = ['BufRead']
hook_post_update = 'TSUpdate'
lua_source = '''
require("nvim-treesitter.configs").setup {
  ensure_installed = {
    "bash",
    "go",
    "html",
    "lua",
    "markdown",
    "markdown_inline",
    "python",
    "query",
    "rust",
    "toml",
    "typescript",
    "vim",
    "yaml",
  },
  highlight = {
    enable = true,
    ---@param lang string
    ---@param bufnr integer
    disable = function(lang, bufnr)
      return vim.tbl_contains({ "bash", "yaml", "vimdoc" }, lang)
        or (
          lang == "vim"
          and vim.api
            .nvim_buf_get_lines(bufnr, 0, 1, false)[1]
            :match "^vim9script"
        )
    end,
  },
}
'''

[[plugins]]
repo = 'nvim-zh/colorful-winsep.nvim'
lazy = true
on_event = ['WinNew']
lua_source = '''
require("colorful-winsep").setup {
  highlight = {
    -- NvimSeparator
    link = "Identifier",
    default = true,
  },
  interval = 30,
  no_exec_files = { "ddu-ff", "ddu-ff-filter" },
  symbols = { "─", "│", "┌", "┐", "└", "┘" },
  create_event = function()
    if require("colorful-winsep.utils").calculate_number_windows() == 2 then
      require("colorful-winsep").NvimSeparatorDel()
    end
  end,
}
'''

[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = ['notify']
lua_add = '''
vim.notify = function(...) require "notify" (...) end
'''
lua_source = '''
require("notify").setup {
  stages = "slide",
  background_color = "NormalFloat",
  minimum_width = 30,
  icons = {
    ERROR = "✗",
    WARN = "‼",
    INFO = "i",
    DEBUG = "D",
    TRACE = "T",
  },
}
'''

[[plugins]]
repo = 'smjonas/inc-rename.nvim'
on_event = ['LspAttach']
lua_source = '''
require("inc_rename").setup {}
'''
