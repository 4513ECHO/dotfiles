[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
let g:context_filetype#filetypes = extend(
      \ copy(context_filetype#default_filetypes()),
      \ {'markdown': values(map(
      \   {'\(\h\w*\)': '\1', 'viml': 'vim'},
      \   { key, val -> {
      \     'start': '^\s*```\s*' .. key,
      \     'end': '^\s*```$',
      \     'filetype': val,
      \ } }))})
let g:context_filetype#ignore_patterns = {
      \ 'toml': ['^\s*#\s*'],
      \ }
'''

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'cocopon/lightline-hybrid.vim'

[[plugins]]
repo = 'delphinus/vim-auto-cursorline'
hook_add = '''
let g:auto_cursorline_wait_ms = 4000
'''
[plugins.ftplugin]
molder = '''
let b:auto_cursorline_disabled = v:true
'''
ddu-ff = '''
let b:auto_cursorline_disabled = v:true
'''
ddu-ff-filter = '''
let b:auto_cursorline_disabled = v:true
'''
fern = '''
let b:auto_cursorline_disabled = v:true
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = [
  'lightline-gruvbox.vim', 'lightline-hybrid.vim',
]
hook_add = '''
let g:lightline = {}
let g:lightline.colorscheme = user#colorscheme#lightline()
let g:lightline.active = {
      \ 'left': [
      \   ['mode', 'paste'],
      \   ['readonly', 'filename', 'modified', 'ddu'],
      \ ],
      \ 'right': [
      \   ['lsp_errors', 'lsp_warnings', 'lineinfo'],
      \   ['percent'],
      \   ['colorscheme', 'fileformat', 'fileencoding', 'filetype'],
      \ ],
      \ }
let g:lightline.inactive = {
      \ 'left': [
      \   ['filename', 'modified'],
      \ ],
      \ }
let g:lightline.component_function = {
      \ 'colorscheme': 'user#lightline#colorscheme',
      \ 'ddu': 'user#lightline#ddu',
      \ 'fileformat': 'user#lightline#file_format',
      \ 'fileencoding': 'user#lightline#file_encoding',
      \ 'filename': 'user#lightline#filename',
      \ 'mode': 'user#lightline#mode',
      \ 'readonly': 'user#lightline#readonly',
      \ 'modified': 'user#lightline#modified',
      \ }
let g:lightline.component = {
      \ 'lineinfo': '%3l:%-2v',
      \ }
let g:lightline.component_expand = {
      \ 'lsp_errors': 'lightline_lsp#errors',
      \ 'lsp_warnings': 'lightline_lsp#warnings',
      \ }
let g:lightline.component_type = {
      \ 'lsp_errors': 'error',
      \ 'lsp_warnings': 'warning',
      \ }
'''

[[plugins]]
repo = 'itchyny/vim-highlighturl'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
" TODO: send PR to the repository to use instead 'hi def Group' instead of 'hi Group'
" autocmd vimrc ColorScheme * hi link ParenMatch MatchParen
'''

[[plugins]]
repo = 'lambdalisue/guise.vim'
depends = ['denops.vim']

[[plugins]]
repo = 'mattn/vim-molder'
[plugins.ftplugin]
molder = '''
setlocal nolist nospell
nmap <buffer> <C-l> <Plug>(molder-reload)<Cmd>set nohlsearch<CR>
nnoremap <buffer> q <C-w>q
nnoremap <silent><buffer><expr> R
      \ printf('<Cmd>edit %s<CR>', system('git rev-parse --show-toplevel'))
nnoremap <silent><buffer><expr> .
      \ printf('<Cmd>edit %s<CR>', getcwd())
nnoremap <silent><buffer><expr> j
      \ line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k
      \ line('.') == 1 ? 'G' : 'k'
'''

[[plugins]]
repo = 'mattn/vim-molder-operations'
[plugins.ftplugin]
molder = '''
nmap <silent><buffer> dd <Plug>(molder-operations-delete)
nmap <silent><buffer> r  <Plug>(molder-operations-rename)
'''

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'roxma/vim-tmux-clipboard'
if = '!has("gui_running")'

[[plugins]]
repo = 'shinchu/lightline-gruvbox.vim'

[[plugins]]
repo = 'thinca/vim-localrc'
hook_add = '''
let g:localrc_filename = '.vimrc.local'
'''


