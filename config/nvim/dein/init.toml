[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'cocopon/lightline-hybrid.vim'

[[plugins]]
repo = 'delphinus/vim-auto-cursorline'
hook_add = '''
let g:auto_cursorline_wait_ms = 4000
'''
[plugins.ftplugin]
qf = '''
let b:auto_cursorline_disabled = v:true
'''
molder = '''
let b:auto_cursorline_disabled = v:true
'''
ddu-ff = '''
let b:auto_cursorline_disabled = v:true
'''
ddu-ff-filter = '''
let b:auto_cursorline_disabled = v:true
'''
fern = '''
let b:auto_cursorline_disabled = v:true
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['lightline-gruvbox.vim', 'lightline-hybrid.vim']
hook_add = '''
let g:lightline = #{
      \ colorscheme: user#colorscheme#lightline(),
      \ subseparator: #{ left: '/', right: '/' },
      \ active: #{
      \   left: [
      \     ['mode', 'paste'],
      \     ['readonly', 'filename', 'modified'],
      \     ['protocol', 'ddu', 'lsp_progress'],
      \   ],
      \   right: [
      \     ['lsp_errors', 'lsp_warnings', 'lineinfo'],
      \     ['percent'],
      \     ['colorscheme', 'fileformat', 'fileencoding', 'filetype'],
      \   ],
      \ },
      \ inactive: #{ left: [ ['filename', 'modified'] ] },
      \ component_function: #{
      \   colorscheme: 'lightline#component#vimrc#colorscheme',
      \   ddu: 'lightline#component#vimrc#ddu',
      \   fileformat: 'lightline#component#vimrc#file_format',
      \   fileencoding: 'lightline#component#vimrc#file_encoding',
      \   filename: 'lightline#component#vimrc#filename',
      \   mode: 'lightline#component#vimrc#mode',
      \   readonly: 'lightline#component#vimrc#readonly',
      \   modified: 'lightline#component#vimrc#modified',
      \   protocol: 'lightline#component#vimrc#protocol',
      \   lsp_progress: 'lightline_lsp_progress#progress',
      \ },
      \ component: #{
      \   lineinfo: '%3l:%-2v',
      \ },
      \ component_expand: #{
      \   lsp_errors: 'lightline_lsp#errors',
      \   lsp_warnings: 'lightline_lsp#warnings',
      \ },
      \ component_type: #{
      \   lsp_errors: 'error',
      \   lsp_warnings: 'warning',
      \ },
      \ }
" from https://github.com/sheepla/dotfiles/blob/fcda1fd7/config/nvim/lightlinerc.vim#L52
command! -bar LightlineUpdate
      \ call lightline#init() | call lightline#colorscheme() | call lightline#update()
'''

[[plugins]]
repo = 'itchyny/vim-highlighturl'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
# TODO: send PR to the repository to use instead 'hi def Group' instead of 'hi Group'
# autocmd vimrc ColorScheme * hi link ParenMatch MatchParen

[[plugins]]
repo = 'lambdalisue/guise.vim'
depends = ['denops.vim']
hook_add = '''
let g:guise_edit_opener = 'vsplit'
'''

[[plugins]]
repo = 'lambdalisue/mr.vim'

[[plugins]]
repo = 'mattn/vim-molder'
[plugins.ftplugin]
molder = '''
setlocal nolist nospell
nnoremap <buffer> <C-l> <Plug>(molder-reload)<Cmd>set nohlsearch<CR>
nnoremap <buffer> q <C-w>q
nnoremap <silent><buffer><expr> R
      \ printf('<Cmd>edit %s<CR>', system('git rev-parse --show-toplevel'))
nnoremap <silent><buffer><expr> .
      \ printf('<Cmd>edit %s<CR>', getcwd())
nnoremap <silent><buffer><expr> j
      \ line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k
      \ line('.') == 1 ? 'G' : 'k'
'''

[[plugins]]
repo = 'mattn/vim-molder-operations'
[plugins.ftplugin]
molder = '''
nnoremap <silent><buffer> dd <Plug>(molder-operations-delete)
nnoremap <silent><buffer> r  <Plug>(molder-operations-rename)
'''

[[plugins]]
repo = 'mhinz/vim-signify'
hook_add = '''
call setcellwidths([[0x2503, 0x2503, 1]])
let g:signify_sign_add               = '┃'
let g:signify_sign_change            = '┃'
let g:signify_sign_delete            = '┃'
let g:signify_sign_delete_first_line = '┃'
let g:signify_line_highlight = v:false
'''

[[plugins]]
repo = 'micchy326/lightline-lsp-progress'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'roxma/vim-tmux-clipboard'
if = '!has("gui_running")'

[[plugins]]
repo = 'shinchu/lightline-gruvbox.vim'

[[plugins]]
repo = 'thinca/vim-localrc'
hook_add = '''
let g:localrc_filename = '.vimrc.local'
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_bufTypeExclude = ['help', 'terminal']
let g:indentLine_char = '¦'
let g:indentLine_faster = v:true
let g:indentLine_setConceal = v:false
'''

