hook_add = '''
let g:python_highlight_all = v:true
let g:awk_is_gawk = v:true
let g:is_bash = v:true
let g:rust_bang_comment_leader = v:true
let g:markdown_fenced_languages = ['ts=typescript']
let g:vim_indent_cont = 6
let g:vimsyn_embed = 'lP'
let g:vimsyn_noerror = v:true

let g:loaded_2html_plugin      = v:true
let g:loaded_getscript         = v:true
let g:loaded_getscriptPlugin   = v:true
let g:loaded_gzip              = v:true
let g:loaded_gtags             = v:true
let g:loaded_gtags_cscope      = v:true
let g:loaded_logiPat           = v:true
let g:loaded_man               = v:true
let g:loaded_matchit           = v:true
let g:loaded_matchparen        = v:true
let g:loaded_netrw             = v:true
let g:loaded_netrwFileHandlers = v:true
let g:loaded_netrwPlugin       = v:true
let g:loaded_netrwSettings     = v:true
let g:loaded_rrhelper          = v:true
let g:loaded_shada_plugin      = v:true
let g:loaded_spellfile_plugin  = v:true
let g:loaded_sql_completion    = v:true
let g:loaded_syntax_completion = v:true
let g:loaded_tar               = v:true
let g:loaded_tarPlugin         = v:true
let g:loaded_tutor_mode_plugin = v:true
let g:loaded_vimball           = v:true
let g:loaded_vimballPlugin     = v:true
let g:loaded_zip               = v:true
let g:loaded_zipPlugin         = v:true
'''

[ftplugin]
_ = '''
setlocal formatoptions-=r
setlocal formatoptions-=o
setlocal formatoptions+=mMBl
'''

dockerfile = '''
function! s:set_abbrev(instruction) abort
  execute 'inoreabbrev <expr><buffer>' a:instruction
        \ printf("(getline('.')[:col('.') - 2] ==# '%s')", a:instruction)
        \ printf("? '%s' : '%s'", toupper(a:instruction), a:instruction)
endfunction

call s:set_abbrev('add')
call s:set_abbrev('arg')
call s:set_abbrev('cmd')
call s:set_abbrev('copy')
call s:set_abbrev('entrypoint')
call s:set_abbrev('env')
call s:set_abbrev('expose')
call s:set_abbrev('from')
call s:set_abbrev('healthcheck')
call s:set_abbrev('label')
call s:set_abbrev('onbuild')
call s:set_abbrev('run')
call s:set_abbrev('shell')
call s:set_abbrev('user')
call s:set_abbrev('volume')
call s:set_abbrev('workdir')

inoreabbrev <expr><buffer> as
      \ (getline('.')[:col('.') - 2] =~# '^FROM\s\+.*\s\+') ? 'AS' : 'as'
'''

gitcommit = '''
setlocal textwidth=72 colorcolumn=+1
" from https://zenn.dev/uochan/articles/2021-12-08-vim-conventional-commits
function! s:select_type() abort
  let title = printf('%s: ', trim(split(getline('.'), ';')[0]))
  silent! normal! "_dip
  silent! put! =title
  silent! startinsert!
endfunction
nnoremap <buffer> <CR><CR> <Cmd>call <SID>select_type()<CR>
'''

gitrebase = '''
nnoremap <buffer> <CR> <Cmd>Cycle<CR>
'''

help = '''
nnoremap <buffer> q <C-w>q
nnoremap <buffer> <CR> <C-]>zv
xnoremap <buffer> <CR> <C-]>zv
nnoremap <buffer><silent><expr> [Toggle]l
      \ printf('<Cmd>help %s@%s<CR>', expand('<cword>'),
      \ expand('%:e') ==# 'jax' ? 'en': 'ja')

let s:tag_pattern = join([
      \ '\\\@<!|[#-)!+-~]\+|', '\*[#-)!+-~]\+\*\s', '\*[#-)!+-~]\+\*$',
      \ "'[a-z]\\{2,\\}'", "'t_..'",
      \ '<[-a-zA-Z0-9_]\+>', '<[SCM]-.>',
      \ 'CTRL-.', 'CTRL-SHIFT-.', 'CTRL-Break', 'CTRL-PageUp', 'CTRL-PageDown',
      \ 'CTRL-Insert', 'CTRL-Del', 'CTRL-{char}',
      \ ], '\|')
function! s:move_link(dir, count) abort
  for cnt in range(a:count)
    let flags = (a:dir ? '' : 'b') .. 'W'
    call search(s:tag_pattern, flags, 0, 500)
  endfor
endfunction
nnoremap <buffer> <C-n> <Cmd>call <SID>move_link(1, v:count1)<CR>
nnoremap <buffer> <C-p> <Cmd>call <SID>move_link(0, v:count1)<CR>

" NOTE: moved from Neovim's runtime/ftplugin/help.vim
function! s:show_toc() abort
  let bufname = bufname('%')
  let info = getloclist(0, {'winid': 1})
  if !empty(info) && getwinvar(info.winid, 'qf_toc') ==# bufname
    lopen
    return
  endif

  let toc = []
  let lnum = 2
  let last_line = line('$') - 1
  let last_added = 0
  let has_section = 0
  let has_sub_section = 0

  while lnum && lnum <= last_line
    let level = 0
    let add_text = ''
    let text = getline(lnum)

    if text =~# '^=\+$' && lnum + 1 < last_line
      " A de-facto section heading.  Other headings are inferred.
      let has_section = 1
      let has_sub_section = 0
      let lnum = nextnonblank(lnum + 1)
      let text = getline(lnum)
      let add_text = text
      while add_text =~# '\*[^*]\+\*\s*$'
        let add_text = matchstr(add_text, '.*\ze\*[^*]\+\*\s*$')
      endwhile
    elseif text =~# '^[A-Z0-9][-A-ZA-Z0-9 .][-A-Z0-9 .():]*\%([ \t]\+\*.\+\*\)\?$'
      " Any line that's yelling is important.
      let has_sub_section = 1
      let level = has_section
      let add_text = matchstr(text, '.\{-}\ze\s*\%([ \t]\+\*.\+\*\)\?$')
    elseif text =~# '\~$'
          \ && matchstr(text, '^\s*\zs.\{-}\ze\s*\~$') !~# '\t\|\s\{2,}'
          \ && getline(lnum - 1) =~# '^\s*<\?$\|^\s*\*.*\*$'
          \ && getline(lnum + 1) =~# '^\s*>\?$\|^\s*\*.*\*$'
      " These lines could be headers or code examples.  We only want the
      " ones that have subsequent lines at the same indent or more.
      let l = nextnonblank(lnum + 1)
      if getline(l) =~# '\*[^*]\+\*$'
        " Ignore tag lines
        let l = nextnonblank(l + 1)
      endif

      if indent(lnum) <= indent(l)
        let level = has_section + has_sub_section
        let add_text = matchstr(text, '\S.*')
      endif
    endif

    let add_text = substitute(add_text, '\s\+$', '', 'g')
    if !empty(add_text) && last_added != lnum
      let last_added = lnum
      call add(toc, {'bufnr': bufnr('%'), 'lnum': lnum,
            \ 'text': repeat('  ', level) . add_text})
    endif
    let lnum = nextnonblank(lnum + 1)
  endwhile

  call setloclist(0, toc, ' ')
  call setloclist(0, [], 'a', {'title': 'Help TOC'})
  lopen
  let w:qf_toc = bufname
endfunction
nnoremap <buffer> gO <Cmd>call <SID>show_toc()<CR>
'''

markdown = '''
hi link markdownCode Constant
autocmd vimrc ColorScheme *
      \ hi link markdownCode Constant
'''

python = '''
setlocal softtabstop=4 shiftwidth=4
setlocal textwidth=80
setlocal smarttab nosmartindent
inoreabbrev <expr><buffer> improt
      \ (getline('.')[:col('.') - 2] =~# 'from\s\+.*\s\+' <Bar><Bar>
      \  getline('.')[:col('.') - 2] ==# 'improt')
      \ ? 'import' : 'improt'
'''

qf = '''
setlocal nowrap nolist
setlocal numberwidth=2
nnoremap <buffer><expr> q getwininfo(win_getid())[0].loclist
      \ ? '<Cmd>lclose<CR>'
      \ : '<Cmd>cclose<CR>'
" based on https://github.com/kuuote/dotvim/blob/9c7ba6307c/ftplugin/qf.vim#L1
nnoremap <buffer><expr> j (line('.') == line('$') ? 'gg' : 'j') .. '<CR>zz<C-w>p'
nnoremap <buffer><expr> k (line('.') == 1 ? 'G' : 'k') .. '<CR>zz<C-w>p'
" from https://github.com/mityu/dotfiles/blob/f5cb5f9a92/dot_vim/runtime/ftplugin/qf.vim#L6
nnoremap <buffer> o <CR>zz<C-w>p
nnoremap <buffer> p <CR>zz<C-w>p
'''

toml = '''
if !has('nvim') && !empty(filter(getline(1, 4),
      \ { _, val -> val =~# '\V\^\([[plugins]]\|hook_\)' }))
  call dein#toml#syntax()
endif
'''

zsh = '''
setlocal iskeyword+=-
'''

checkhealth = '''
nnoremap <buffer> q <C-w>q
'''

go = '''
setlocal noexpandtab nosmarttab shiftwidth=0
'''

[[plugins]]
repo = '4513echo/vim-jq_indent'
on_ft = ['jq']

[[plugins]]
repo = 'bfrg/vim-jq'
merge_ftdetect = true
on_ft = ['jq']

[[plugins]]
repo = 'cohama/vim-hier'
on_ft = ['qf']
on_cmd = ['HierClean', 'HierStart', 'HierStop', 'HierUpdate']
[plugins.ftplugin]
qf = '''
autocmd vimrc WinClosed <buffer>
      \ : if &buftype ==# 'quickfix'
      \ |   execute 'HierStop'
      \ | endif
'''

[[plugins]]
repo = 'itchyny/vim-qfedit'
on_ft = ['qf']

[[plugins]]
repo = 'lark-parser/vim-lark-syntax'
merge_ftdetect = true
on_ft = ['lark']

[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = ['markdown']
on_cmd = ['MakeTable', 'UnmakeTable']

[[plugins]]
repo = 'mrk21/yaml-vim'
on_ft = ['yaml']

[[plugins]]
repo = 'MTDL9/vim-log-highlighting'
merge_ftdetect = true
on_ft = ['log']

[[plugins]]
repo = 'rbtnn/vim-vimscript_indentexpr'
on_ft = ['vim']

[[plugins]]
repo = 'syusui-s/scrapbox-vim'
merge_ftdetect = true
on_ft = ['scrapbox']

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['qf']
on_cmd = ['Qfreplace']
[plugins.ftplugin]
qf = '''
nnoremap <buffer> r <Cmd>Qfreplace<CR>
'''
qfreplace = '''
nnoremap <buffer> q <C-w>q
'''

[[plugins]]
repo = 'tmux-plugins/vim-tmux'
merge_ftdetect = true
on_ft = ['tmux']

[[plugins]]
repo = 'tpope/vim-git'
merge_ftdetect = true
on_ft = ['gitcommit', 'gitconfig', 'gitrebase', 'gitsendmail']
