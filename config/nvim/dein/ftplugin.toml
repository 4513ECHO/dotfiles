hook_add = '''
let g:python_highlight_all = v:true
let g:awk_is_gawk = v:true
let g:is_bash = v:true
let g:rust_bang_comment_leader = v:true
let g:markdown_fenced_languages = ['ts=typescript']
let g:vim_indent_cont = 6
let g:vimsyn_embed = 'lP'
let g:vimsyn_noerror = v:true

let g:loaded_2html_plugin      = v:true
let g:loaded_getscript         = v:true
let g:loaded_getscriptPlugin   = v:true
let g:loaded_gzip              = v:true
let g:loaded_gtags             = v:true
let g:loaded_gtags_cscope      = v:true
let g:loaded_logiPat           = v:true
let g:loaded_man               = v:true
let g:loaded_matchit           = v:true
let g:loaded_matchparen        = v:true
let g:loaded_netrw             = v:true
let g:loaded_netrwFileHandlers = v:true
let g:loaded_netrwPlugin       = v:true
let g:loaded_netrwSettings     = v:true
let g:loaded_rrhelper          = v:true
let g:loaded_shada_plugin      = v:true
let g:loaded_spellfile_plugin  = v:true
let g:loaded_sql_completion    = v:true
let g:loaded_syntax_completion = v:true
let g:loaded_tar               = v:true
let g:loaded_tarPlugin         = v:true
let g:loaded_tutor_mode_plugin = v:true
let g:loaded_vimball           = v:true
let g:loaded_vimballPlugin     = v:true
let g:loaded_zip               = v:true
let g:loaded_zipPlugin         = v:true
'''

[ftplugin]
_ = '''
setlocal formatoptions-=r
setlocal formatoptions-=o
setlocal formatoptions+=mMBl
'''

dockerfile = '''
function! s:set_abbrev(instruction) abort
  execute 'inoreabbrev <buffer><expr>' a:instruction
        \ "(getline('.')[:col('.') - 2] ==# '{a:instruction}')"
        \ $"? '{toupper(a:instruction)}' : '{a:instruction}'"
endfunction

call s:set_abbrev('add')
call s:set_abbrev('arg')
call s:set_abbrev('cmd')
call s:set_abbrev('copy')
call s:set_abbrev('entrypoint')
call s:set_abbrev('env')
call s:set_abbrev('expose')
call s:set_abbrev('from')
call s:set_abbrev('healthcheck')
call s:set_abbrev('label')
call s:set_abbrev('onbuild')
call s:set_abbrev('run')
call s:set_abbrev('shell')
call s:set_abbrev('user')
call s:set_abbrev('volume')
call s:set_abbrev('workdir')

inoreabbrev <buffer><expr> as
      \ (getline('.')[:col('.') - 2] =~# '^FROM\s\+.*\s\+') ? 'AS' : 'as'
'''

gitcommit = '''
setlocal textwidth=72 colorcolumn=+1
" based on https://zenn.dev/uochan/articles/2021-12-08-vim-conventional-commits
function! s:select_type() abort
  let title = getline('.')->split(';')[0]->trim()->printf('%s: ')
  normal! "_dip
  put! =title
endfunction
nnoremap <buffer> <CR><CR> <Cmd>call <SID>select_type()<CR>A
nnoremap <buffer> [Space]q <C-w>q
if expand('#')->getbufvar('&buftype') ==# 'terminal'
  autocmd vimrc WinClosed <buffer> ++once startinsert
endif
'''

gitrebase = '''
nnoremap <buffer> <CR>  <Cmd>Cycle<CR>
nnoremap <buffer> <C-j> <Cmd>move +1<CR>
nnoremap <buffer> <C-k> <Cmd>move -2<CR>
nnoremap <buffer> [Space]q <C-w>q
if expand('#')->getbufvar('&buftype') ==# 'terminal'
  autocmd vimrc WinClosed <buffer> ++once startinsert
endif
'''

help = '''
nnoremap <buffer> q <C-w>q
nnoremap <buffer> <CR> <C-]>zv
xnoremap <buffer> <CR> <C-]>zv
nnoremap <buffer><expr> [Toggle]l
      \ printf('<Cmd>help %s@%s<CR>', expand('<cword>'),
      \ expand('%:e') ==# 'jax' ? 'en': 'ja')
'''

python = '''
setlocal softtabstop=4 shiftwidth=4
setlocal textwidth=80
setlocal smarttab nosmartindent
inoreabbrev <expr><buffer> improt
      \ (getline('.')[:col('.') - 2] =~# 'from\s\+.*\s\+' <Bar><Bar>
      \  getline('.')[:col('.') - 2] ==# 'improt') ? 'import'
      \ : 'improt'
'''

qf = '''
setlocal nowrap nolist
setlocal numberwidth=2
nnoremap <buffer><expr> q getwininfo(win_getid())[0].loclist ?
      \   '<Cmd>lclose<CR>'
      \ : '<Cmd>cclose<CR>'
nnoremap <buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
nnoremap <buffer><expr> k line('.') == 1         ? 'G'  : 'k'
" from https://github.com/mityu/dotfiles/blob/f5cb5f9a/dot_vim/runtime/ftplugin/qf.vim#L6
nnoremap <buffer> o <CR>zz<C-w>p
nnoremap <buffer> p <CR>zz<C-w>p
'''

toml = '''
if !has('nvim') && getline(1) =~# '\v^(\[\[plugins]]|hook_)'
  call dein#toml#syntax()
endif
'''

zsh = '''
setlocal iskeyword+=-
'''

checkhealth = '''
nnoremap <buffer> q <C-w>q
'''

go = '''
setlocal noexpandtab nosmarttab shiftwidth=0
'''

tsv = '''
setlocal noexpandtab
'''

vim = '''
setlocal formatoptions-=ro textwidth=0
'''

[[plugins]]
repo = 'https://github.com/4513ECHO/vim-jq-indent'

[[plugins]]
repo = 'https://github.com/4513ECHO/vim-vimhelp-hoptag'
[plugins.ftplugin]
help = '''
nnoremap <buffer> <C-n> <Plug>(hoptag-next)
nnoremap <buffer> <C-p> <Plug>(hoptag-prev)
'''

[[plugins]]
repo = 'https://github.com/bfrg/vim-jq'
merge_ftdetect = true

[[plugins]]
repo = 'https://github.com/cohama/vim-hier'
on_event = ['QuickFixCmdPost']
[plugins.ftplugin]
qf = '''
autocmd vimrc WinClosed <buffer>
      \ : if &buftype ==# 'quickfix'
      \ |   execute 'HierStop'
      \ | endif
'''

[[plugins]]
repo = 'https://github.com/Fymyte/rasi.vim'
merge_ftdetect = true
[plugins.ftplugin]
rasi = '''
setlocal shiftwidth=4 indentkeys=0{,0},o,O
'''

[[plugins]]
repo = 'https://github.com/itchyny/vim-qfedit'
on_event = ['QuickFixCmdPost']

[[plugins]]
repo = 'https://github.com/lark-parser/vim-lark-syntax'
merge_ftdetect = true

[[plugins]]
repo = 'https://github.com/lifepillar/pgsql.vim'
merge_ftdetect = true
hook_add = '''
let g:sql_type_default = 'pgsql'
'''

[[plugins]]
repo = 'https://github.com/MTDL9/vim-log-highlighting'
merge_ftdetect = true

[[plugins]]
repo = 'https://github.com/rbtnn/vim-vimscript_indentexpr'

[[plugins]]
repo = 'https://github.com/syusui-s/scrapbox-vim'
merge_ftdetect = true

[[plugins]]
repo = 'https://github.com/thinca/vim-qfreplace'
on_cmd = ['Qfreplace']
[plugins.ftplugin]
qf = '''
nnoremap <buffer> r <Cmd>Qfreplace<CR>
'''
qfreplace = '''
nnoremap <buffer> q <C-w>q
'''

[[plugins]]
repo = 'https://github.com/vim-skk/skkdict.vim'
merge_ftdetect = true
