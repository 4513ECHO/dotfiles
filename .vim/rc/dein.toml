# dein.vim自身を管理
[[plugins]]
repo = 'Shougo/dein.vim'

# カラースキーム
[[plugins]]
repo = 'tomasr/molokai'

# カラースキームを調べる
[[plugins]]
repo = 'guns/xterm-color-table.vim'

# ステータスラインの表示内容強化
[[plugins]]
repo = 'itchyny/lightline.vim'

# 末尾の全角半角空白文字を赤くハイライト
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# カラーコードのプレビュー
[[plugins]]
repo = 'gko/vim-coloresque'
# プログラムの即時実行

[[plugins]]
repo = 'thinca/vim-quickrun'

# 構文エラーチェック
[[plugins]]
repo = 'scrooloose/syntastic'
hook_post_updete = '''
  " 構文エラー行に「>>」を表示
  let g:syntastic_enable_signs = 1
  " 他のVimプラグインと競合するのを防ぐ
  let g:syntastic_always_populate_loc_list = 1
  " 構文エラーリストを非表示
  let g:syntastic_auto_loc_list = 0
  " ファイルを開いた時に構文エラーチェックを実行する
  let g:syntastic_check_on_open = 1
  " 「:wq」で終了する時も構文エラーチェックする
  let g:syntastic_check_on_wq = 1
  " Javascript用. 構文エラーチェックにESLintを使用
  let g:syntastic_javascript_checkers=['eslint']
  " Python用. 構文エラーチェックにpep8とpyflakesを使用
  let g:syntastic_python_checkers=['pep8', 'pyflakes']
  " Javascript, python以外は構文エラーチェックをしない
  let g:syntastic_mode_map = { 'mode': 'passive',
      \ 'active_filetypes': ['javascript', 'python'],
      \ 'passive_filetypes': [] }
'''

# 多機能セレクタ
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_post/update = '''
let g:ctrlp_match_window = 'order:ttb,min:20,max:20,results:100' " マッチウインドウの設定. 「下部に表示, 大きさ20行で固定, 検索結果100件」
let g:ctrlp_show_hidden = 1 " .(ドット)から始まるファイルも検索対象にする
let g:ctrlp_types = ['fil'] "ファイル検索のみ使用
let g:ctrlp_extensions = ['funky', 'commandline'] " CtrlPの拡張として「funky」と「commandline」を使用
'''

# CtrlPの拡張プラグイン. 関数検索
[[plugins]]
repo = 'tacahiroy/ctrlp-funky'
hook_post_update = '''
let g:ctrlp_funky_matchtype = 'path'
'''

# CtrlPの拡張プラグイン. コマンド履歴検索
[[plugins]]
repo = 'suy/vim-ctrlp-commandline'
hook_post_update = '''
command! CtrlPCommandLine call ctrlp#init(ctrlp#commandline#id())
'''

# CtrlPの検索にagを使う
[[plugins]]
repo = 'rking/ag.vim'
hook_post_update = '''
if executable('ag')
  let g:ctrlp_use_caching=0 " CtrlPのキャッシュを使わない
  let g:ctrlp_user_command='ag %s -i --hidden -g ""' " 「ag」の検索設定
endif
'''

# 括弧補完
[[plugins]]
repo = 'cohama/lexima.vim'

# コードの自動補完
[[plugins]]
repo = 'Shougo/neocomplete.vim'
if   = '''has('lua')'''
hook_post_update = '''
  " Vim起動時にneocompleteを有効にする
  let g:neocomplete#enable_at_startup = 1
  " smartcase有効化
  " 大文字が入力されるまで大文字小文字の区別を無視する
  let g:neocomplete#enable_smart_case = 1
  " 3文字以上の単語に対して補完を有効にする
  let g:neocomplete#min_keyword_length = 3
  " 区切り文字まで補完する
  let g:neocomplete#enable_auto_delimiter = 1
  " 1文字目の入力から補完のポップアップを表示
  let g:neocomplete#auto_completion_start_length = 1
  " バックスペースで補完のポップアップを閉じる
  inoremap <expr><BS> neocomplete#smart_close_popup()."<C-h>"
  " エンターキーで補完候補の確定.
  " スニペットの展開もエンターキーで確定
  imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
  " タブキーで補完候補の選択.
  " スニペット内のジャンプもタブキーでジャンプ
  imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
  " Vim起動時にneocompleteを有効にする
  let g:neocomplete#enable_at_startup = 1
  " smartcase有効化. 大文字が入力されるまで大文字小文字の区別を無視する
  let g:neocomplete#enable_smart_case = 1
  " 3文字以上の単語に対して補完を有効にする
  let g:neocomplete#min_keyword_length = 3
  " 区切り文字まで補完する
  let g:neocomplete#enable_auto_delimiter = 1
  " 1文字目の入力から補完のポップアップを表示
  let g:neocomplete#auto_completion_start_length = 1
  " バックスペースで補完のポップアップを閉じる
  inoremap <expr><BS> neocomplete#smart_close_popup()."<C-h>"
  " エンターキーで補完候補の確定
  " スニペットの展開もエンターキーで確定
  imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
  " タブキーで補完候補の選択
  " スニペット内のジャンプもタブキーでジャンプ
  imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
'''

# スニペットの補完機能
[[plugins]]
repo = 'Shougo/neosnippet'
if   = '''has('lua')'''

# スニペット集
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
if   = '''has('lua')'''

